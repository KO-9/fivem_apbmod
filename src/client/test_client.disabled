Delay = (ms) => new Promise(res => setTimeout(res, ms));

var justDied = false;

onNet("baseevents:onPlayerKilled", (player, killer, reason, pos) => {
  console.log("you died bro");
  justDied = true;
});

onNet("baseevents:enteringVehicle", (veh, seat, model, netid) => {
  console.log(veh);
});

onNet("baseevents:enteringAborted", () => {
  console.log("abb");
});

//baseevents:enteringVehicle/vehicle, seat, GetDisplayNameFromVehicleModel(GetEntityModel(vehicle)), netId
//baseevents:enteringAborted

const StealCar = [
  646.36920166,
  600.17944335,
  128.91094970
];

var startNpcTask = false;
var CarEntity = null;

var missionNpcs = [
  {
    pos: {x: 663.3182737, y: 604.47717285, z: 129.05096435},
    hash: "g_f_y_lost_01",
    alertness: 3,
    weapon: "WEAPON_SPECIALCARBINE",
    armour: 100,
  },
  {
    pos: {x: 661.33306884766, y: 593.91845703125, z: 138.04664611816},
    hash: "g_f_y_lost_01",
    alertness: 3,
    weapon: "WEAPON_SPECIALCARBINE",
    armour: 100,
  },
];

var stageThreeNpcs = [
  {
    vehicle: "adder",
    pos: {x: 715.73083496094, y: 659.35522460938, z: 128.9112701416, h: 157.84930419922},
    npcs:[
      {
        pos: {x: 715.73083496094, y: 659.35522460938, z: 128.9112701416},
        hash: "g_f_y_lost_01",
        alertness: 3,
        weapon: "WEAPON_SPECIALCARBINE",
        armour: 100,
      },
    ],
  },
];

var stage = 0;
var blip = null;

var missionPeds = [];
var missionGroup = null;
var missionText = null;
var remaining = 0;
const missionCheckpoints = [{
  x: 646.36920166,
  y: 600.17944335,
  z: 128.91094970,
  radius: 100,
  type: 5,
  colour: [204, 204, 1, 100],
  title: "Mission Objective",
  blip_id: 590,
  blip_colour: 0,
},
{
  x: 646.36920166,
  y: 600.17944335,
  z: 128.91094970,
  radius: 100,
  type: 5,
  colour: [204, 204, 1, 100],
  title: "Mission Objective",
  blip_id: 590,
  blip_colour: 0,
}];
var missionCheckpointHandler = null;
var currentCheckpoint = null;

//1s think
setTick(async() => {
  await Delay(1000);
  if(missionCheckpointHandler != null && currentCheckpoint === 0 || justDied) {
    
    const ped = PlayerPedId();
    const coords = GetEntityCoords(ped);
    const dist = GetDistanceBetweenCoords(missionCheckpoints[0].x,  missionCheckpoints[0].y,  missionCheckpoints[0].z, coords[0], coords[1], coords[2]);

    if(dist < 70.0) {
      spawnStageOne();
      DeleteCheckpoint(missionCheckpointHandler);
      missionCheckpointHandler = null;
      currentCheckpoint = null;
      missionText = "Eliminate the guards to unlock the car";

      justDied = false;
      stage = 1;
    }
  }
  if(missionCheckpointHandler != null && currentCheckpoint === 1) {
    const ped = PlayerPedId();
    const pedVehicle = GetVehiclePedIsIn(ped, false);
    if(pedVehicle == CarEntity) {
      startStageThree();
    }
  }
});

async function startStageThree() {
  DeleteCheckpoint(missionCheckpointHandler);
  missionCheckpointHandler = null;
  currentCheckpoint = null;
  missionText = "Deliver the car to the drop off point";
  stage = 3;
  for(var i = 0; i < stageThreeNpcs.length; i++) {
    var npc = stageThreeNpcs[i];
    if(npc.vehicle == false) {//regular npc

    } else {//car
      const hash = GetHashKey(npc.vehicle);
      RequestModel(hash);
      while (!HasModelLoaded(hash))
      {
        await Delay(500);
      }
      let vehicle = CreateVehicle(hash, npc.pos.x, npc.pos.y, npc.pos.z, npc.pos.h, true, true);
      for(var x = 0; x < npc.npcs.length; x++) {
        var carnpc = npc.npcs[x];
        var carpos = -2;//First avail passenger seat
        if(x == 0) { 
          carpos = -1;//Driver seat 
        }
        const newhash = GetHashKey(carnpc.hash);
        RequestModel(newhash);
        while (!HasModelLoaded(newhash))
        {
          await Delay(500);
        }
        let newPed = CreatePedInsideVehicle(vehicle, 5, newhash, carpos, true, true);
        SetBlockingOfNonTemporaryEvents(newPed, true);
        SetPedCombatAttributes(newPed, 46, true);
        SetPedFleeAttributes(newPed, 0, 0);
        SetPedRelationshipGroupHash(newPed, missionGroup);
        SetPedAlertness(newPed, carnpc.alertness);
        GiveWeaponToPed(newPed, carnpc.weapon, 50, false, true);
        SetPedInfiniteAmmo(newPed, true, carnpc.weapon);
        SetPedArmour(newPed, carnpc.armour);
        //TaskGuardCurrentPosition(newPed, 35.0, 35.0, 1);
        //TaskCombatHatedTargetsAroundPed(newPed, 35.0, 0);
        //chase?
        TaskVehicleChase(newPed, GetPlayerPed(-1))
        SetPedKeepTask(newPed, true);
      }
    }
  }
}

//No delay
//For text/hud
//Npc relations
setTick(async() => {
  displayText();
  displayMarker();
  //missionDisplayBlips();
  if(missionGroup != null) {
    SetRelationshipBetweenGroups(5, GetHashKey("PLAYER"), missionGroup);
    SetRelationshipBetweenGroups(5, missionGroup, GetHashKey("PLAYER"));
  }
});

async function spawnStageOne() {
  missionPeds = [];
  for(var i = 0; i < missionNpcs.length; i++) {
    let npc = missionNpcs[i];
    const newhash = GetHashKey(npc.hash);
    RequestModel(newhash);
    while (!HasModelLoaded(newhash))
    {
      await Delay(500);
    }
    let newPed = CreatePed(5, newhash, npc.pos.x, npc.pos.y, npc.pos.z, 0, false, true);
    SetBlockingOfNonTemporaryEvents(newPed, true);
    SetPedCombatAttributes(newPed, 46, true);
    SetPedFleeAttributes(newPed, 0, 0);
    SetPedRelationshipGroupHash(newPed, missionGroup);
    SetPedAlertness(newPed, npc.alertness);
    GiveWeaponToPed(newPed, npc.weapon, 50, false, true);
    SetPedInfiniteAmmo(newPed, true, npc.weapon);
    SetPedArmour(newPed, npc.armour);
    TaskGuardCurrentPosition(newPed, 35.0, 35.0, 1);
    //TaskCombatHatedTargetsAroundPed(newPed, 35.0, 0);
    SetPedKeepTask(newPed, true);
    missionPeds.push(newPed);
  }
  // Request the model and wait until the game has loaded it
  const hash = GetHashKey("adder");
  RequestModel(hash);
  while (!HasModelLoaded(hash))
  {
    await Delay(50);
  }
  CarEntity = CreateVehicle(hash, StealCar[0], StealCar[1], StealCar[2], 157.84930419922, true, false);
  SetVehicleDoorsLocked(CarEntity, 2);
}

function displayMarker() {
  if(CarEntity != null && stage < 3) {
    const coords = GetEntityCoords(CarEntity);
    var alivePeds = 0;
    DrawMarker(2, coords[0], coords[1], coords[2] + 2, 0.0, 0.0, 0.0, 0.0, 180.0, 0.0, 2.0, 2.0, 2.0, 255, 128, 0, 50, false, true, 2, null, null, false)
    DrawMarker(23, coords[0], coords[1], coords[2] - 0.5, 0.0, 0.0, 0.0, 0.0, 180.0, 0.0, 4.0, 4.0, 4.0, 255, 128, 0, 50, false, true, 2, null, null, false)
    for(var i = 0; i < missionPeds.length; i++) {
      let ped = missionPeds[i];
      const isPedDead = IsPedDeadOrDying(ped)
      if(!isPedDead) {
        alivePeds++;
        if(startNpcTask) {
          TaskGuardCurrentPosition(ped, 35.0, 35.0, 1);//Don't hav eto be looped testing if this fixes non-aggro on res
          TaskCombatHatedTargetsAroundPed(ped, 35.0, 0);//Don't hav eto be looped testing if this fixes non-aggro on res
          RegisterHatedTargetsAroundPed(ped, 70);
          SetPedAiBlipForcedOn(ped, true);//Not sure if have to be looped
          startNpcTask = false;
        }
        //TaskGuardCurrentPosition(ped, 35.0, 35.0, 1);//Don't hav eto be looped testing if this fixes non-aggro on res
        //TaskCombatHatedTargetsAroundPed(ped, 35.0, 0);//Don't hav eto be looped testing if this fixes non-aggro on res
        //SetPedAiBlipForcedOn(ped, true);//Not sure if have to be looped
        const pedCoords = GetEntityCoords(ped);
        DrawMarker(2, pedCoords[0], pedCoords[1], pedCoords[2] + 2, 0.0, 0.0, 0.0, 0.0, 180.0, 0.0, 2.0, 2.0, 2.0, 255, 128, 0, 50, false, true, 2, null, null, false)
        DrawMarker(23, pedCoords[0], pedCoords[1], pedCoords[2] - 0.5, 0.0, 0.0, 0.0, 0.0, 180.0, 0.0, 4.0, 4.0, 4.0, 255, 128, 0, 50, false, true, 2, null, null, false)
        missionText = `Eliminate the guards to unlock the car [${missionPeds.length - alivePeds}/${missionPeds.length}]`;
      }
    }
    if(CarEntity != null && alivePeds == 0 && stage < 2) {
      stage = 2;
      SetVehicleDoorsLocked(CarEntity, 1);
      missionText = "Recover the car";
      currentCheckpoint = 1;
      missionCheckpointHandler = CreateCheckpoint(missionCheckpoints[currentCheckpoint].type, missionCheckpoints[currentCheckpoint].x, missionCheckpoints[currentCheckpoint].y, missionCheckpoints[currentCheckpoint].z, 0, 0, 0, missionCheckpoints[currentCheckpoint].radius, missionCheckpoints[currentCheckpoint].colour[0], missionCheckpoints[currentCheckpoint].colour[1], missionCheckpoints[currentCheckpoint].colour[2], missionCheckpoints[currentCheckpoint].colour[3], 0)
    }
  }
}

function displayText() {
  if(missionText != null) {
    SetTextFont(0);
    SetTextScale(0.475, 0.475);
    SetTextColour(0, 0, 0, 255);
    SetTextEntry("STRING");
    AddTextComponentString(missionText);
    DrawText(0.17, 0.9355);
    DrawRect(0.0001, 0.955, 2.0, 0.05, 255, 242, 64, 255);
  }
}



async function missionDisplayBlips() {
  if(currentCheckpoint != null) {
    let cp = missionCheckpoints[currentCheckpoint];
    blip = AddBlipForCoord(StealCar[0], StealCar[1], StealCar[2]);
    SetBlipSprite(blip, cp.blip_id)
    SetBlipDisplay(blip, 4)
    SetBlipScale(blip, 0.9)
    SetBlipColour(blip, cp.blip_colour)
    SetBlipAsShortRange(blip, true)
    BeginTextCommandSetBlipName("STRING")
    AddTextComponentString(cp.title)
    EndTextCommandSetBlipName(blip)
    SetBlipRoute(blip, true);
  }
}

RegisterCommand('mis', async (source, args, raw) => {
  emit('chat:addMessage', {
    args: [`Starting!`]
  });
  let model = "adder";
  stage = 0;
  
  missionText = "Recover the car";
  currentCheckpoint = 0;
  missionCheckpointHandler = CreateCheckpoint(missionCheckpoints[currentCheckpoint].type, missionCheckpoints[currentCheckpoint].x, missionCheckpoints[currentCheckpoint].y, missionCheckpoints[currentCheckpoint].z, 0, 0, 0, missionCheckpoints[currentCheckpoint].radius, missionCheckpoints[currentCheckpoint].colour[0], missionCheckpoints[currentCheckpoint].colour[1], missionCheckpoints[currentCheckpoint].colour[2], missionCheckpoints[currentCheckpoint].colour[3], 0)
  //const blip = AddBlipForCoord(missionCheckpoints[currentCheckpoint].x, missionCheckpoints[currentCheckpoint].y, missionCheckpoints[currentCheckpoint].z)

  const ped = PlayerPedId();
  GiveWeaponToPed(ped, "WEAPON_COMPACTLAUNCHER", 30, false, true);
  GiveWeaponToPed(ped, "WEAPON_SPECIALCARBINE", 30, false, true);
  // Create a vehicle at the player's position
  
  //SetEntityCoords(GetPlayerPed(-1), StealCar[0], StealCar[1], StealCar[2]);

  const newGroup = AddRelationshipGroup("tmission");
  missionGroup = newGroup[1];
  //Set relationship for npcs
  
  //console.log(missionPeds);
  //SetEntityCanBeDamagedByRelationshipGroup(GetPlayerPed(-1), false, “zombeez”)
  
  // Get the coordinates of the player's Ped (their character)
  //const coords = GetEntityCoords(ped);

  // Create a vehicle at the player's position
  //const vehicle = CreateVehicle(hash, coords[0], coords[1], coords[2], GetEntityHeading(ped), true, false);
  //SetEntityAsNoLongerNeeded(CarEntity);
  missionDisplayBlips();
  emit('chat:addMessage', {
    args: [`Done!`]
  });
});

RegisterCommand('testm', async (source, args, raw) => {
    StartGpsMultiRoute(6, true, true);
    AddPointToGpsMultiRoute(1638.2155761719, -2344.685546875, 95.610511779785);
    AddPointToGpsMultiRoute(1653.0858154297, -2068.8654785156, 96.737915039063);
    AddPointToGpsMultiRoute(1451.9561767578, -2113.5344238281, 56.082130432129);
    AddPointToGpsMultiRoute(1540.6088867188, -2514.4519042969, 58.842422485352);
    AddPointToGpsMultiRoute(1638.2155761719, -2344.685546875, 95.610511779785);
    SetGpsMultiRouteRender(true);
    const ped = PlayerPedId();
    const coords = GetEntityCoords(ped);

    const hash = GetHashKey( "g_f_y_lost_01" );
    RequestModel(hash)
    
    while(!HasModelLoaded(hash)) {
        await Delay(500);
    }

    emit('chat:addMessage', {
        args: [`boop1`]
      });

    const newPed = CreatePed(4, hash, coords[0], coords[1], coords[2], 0, false, true);
    SetBlockingOfNonTemporaryEvents(newPed, true);
    SetPedCombatAttributes(newPed, 46, true);
    SetPedFleeAttributes(newPed, 0, 0);
    TaskCombatPed(newPed, ped);

    //SetRelationshipBetweenGroups(newPed, GetHashKey(“HATES_PLAYER”));

    SetEntityCoords(GetPlayerPed(-1), 1638.2155761719, -2344.685546875, 95.610511779785)


    emit('chat:addMessage', {
        args: [`boop2`]
      });

    GiveWeaponToPed(ped, "WEAPON_COMPACTLAUNCHER", 30, false, true);

    emit('chat:addMessage', {
        args: [`boop2`]
      });
});

